package com.inventory.model;

/**
 * Represents a Product entity in the inventory system.
 * This class serves as a data transfer object (DTO) between the frontend and backend,
 * mirroring the backend Product model for consistent data handling.
 */
public class Product {
    private Long id; // Unique identifier for the product
    private String name; // Name of the product
    private String description; // Description of the product
    private double price; // Price of the product
    private int quantity; // Current stock quantity
    private int minStockLevel; // Minimum stock level for alerts
    private Category category; // NEW: Link to frontend Category POJO

    /**
     * Default constructor. Required for JSON deserialization (e.g., by Gson).
     */
    public Product() {
    }

    /**
     * Constructor for creating a Product object with all fields, including ID and Category.
     * @param id The unique ID of the product.
     * @param name The name of the product.
     * @param description The description of the product.
     * @param price The price of the product.
     * @param quantity The current stock quantity of the product.
     * @param minStockLevel The minimum stock level for the product.
     * @param category The category of the product.
     */
    public Product(Long id, String name, String description, double price, int quantity, int minStockLevel, Category category) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.price = price;
        this.quantity = quantity;
        this.minStockLevel = minStockLevel;
        this.category = category;
    }

    /**
     * Constructor for creating a new Product object (without an ID, as it will be generated by the backend).
     * @param name The name of the product.
     * @param description The description of the product.
     * @param price The price of the product.
     * @param quantity The current stock quantity of the product.
     * @param minStockLevel The minimum stock level for the product.
     * @param category The category of the product.
     */
    public Product(String name, String description, double price, int quantity, int minStockLevel, Category category) {
        this(null, name, description, price, quantity, minStockLevel, category); // Calls the full constructor with null ID
    }

    // --- Getters and Setters ---
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public int getMinStockLevel() {
        return minStockLevel;
    }

    public void setMinStockLevel(int minStockLevel) {
        this.minStockLevel = minStockLevel;
    }

    public Category getCategory() { // NEW: Getter for Category
        return category;
    }

    public void setCategory(Category category) { // NEW: Setter for Category
        this.category = category;
    }

    /**
     * Overrides the toString method for easy debugging and logging.
     * @return A string representation of the Product object.
     */
    @Override
    public String toString() {
        return "Product{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", description='" + description + '\'' +
                ", price=" + price +
                ", quantity=" + quantity +
                ", minStockLevel=" + minStockLevel +
                ", category=" + (category != null ? category.getName() : "N/A") +
                '}';
    }
}
